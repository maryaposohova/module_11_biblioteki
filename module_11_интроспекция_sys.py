import sys
from pprint import pprint


# Полезныый системный пакет
print('1 Полезныый системный пакет')
pprint(dir(sys))
print()

# Путь к интерпретатору пайтон
print('2 Путь к интерпретатору пайтон')
pprint(sys.executable)
print()

# в какой операционной системе мы работаем
print('3 в какой операционной системе мы работаем')
pprint(sys.platform)
print()

# текущая версия пайтон
print('4 текущая версия пайтон')
pprint(sys.version)
pprint(sys.version_info)
print()

# список, содержащий параметры командной строки, если она была задана
print('5 список, содержащий параметры командной строки, если она была задана')
pprint(sys.argv)
print()

# путь поиска модуля, список каталогов, в котором пайтон будет искать модули во время импорта
print('6 путь поиска модуля, список каталогов, в котором пайтон будет искать модули во время импорта')
pprint(sys.path)
print()

# словарь, отображающий имена модулей в обьекты модулей, для всех загруженных в текущий момент модулей
print('7 словарь, отображающий имена модулей в обьекты модулей, для всех загруженных в текущий момент модулей')
pprint(sys.modules)
print()

# __builtins__ - псевдо-модуль, содержащий встроенные в интерпретатор обьекты (константы, искл-я, ф-ции)
print('8 __builtins__ - псевдо-модуль, содержащий встроенные в интерпретатор обьекты (константы, искл-я, ф-ции)')
print(__builtins__)
pprint(dir(__builtins__))

print()
print()
""" Чтобы узнать, какого типа данных явл. sys.version , можно воспользоваться ф-цией type()"""

print(type(sys.version))  # это строка, и ее можно разделть с пом. split(), для извлечения номера версии пайтон

# напр для предупреждения пользователя о возможной несовместимости, если версия очень старая или новая
print(sys.version.split())  # указ. разделитель для разд-я строки и выбираем 0 элемент, и с пом if сразниваем версии
def func(x):
    if sys.version.split(' ')[0] == '3.12.4':
        return  x + 10
    else:
        raise Exception('Недопустимая версия')
print(func(10))

pprint(sys.modules)

import warnings
pprint(dir(warnings))



""" Библитоека сис полезна при решении ресурсоёмких задач"""
# вычисление факториала (если n=1, то ф возв 1 * на рез-т рекурсивноговызова ф-ции для n-1
def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)
print(factorial(5))
sys.setrecursionlimit(5000)  # выставляем максимал глубину рекурсии
sys.set_int_max_str_digits(10000)  # увеличиваем длину строки
print(factorial(2000))
factorial_result = factorial(2000)

print(sys.getsizeof(factorial))  # сколько памяти занимает сама программка
print(sys.getsizeof(factorial_result))  # сколько памяти занимает вычисление


